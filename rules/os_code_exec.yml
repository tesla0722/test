--- #!~base
description: Executing OS commands is not fun.
extends: whitelisted_files::whitelisted_files,comments::comments

--- #!python
extends: base
diff: add
description: Please make sure the first argument doesn't come from user-input and that shell=True is NOT passed as argument
line:
    - match: system\(
    - match: Popen\(
    - match: subprocess\.
    - match: import subprocess
    - match: from subprocess
file:
    - match: '\.py$'
tests:
    - pass: 'Popen(cmd, shell=True)'
#    - fail: 'Popen("ping", stdout=PIPE, stderr=STDOUT, shell=False)'

--- #!python_eval
extends: base
description: Eval is evil.
diff: add
line:
    - match: '(eval|execfile|compile|literal_eval)\s*\('
    - match: import ast
    - match: from ast
    - except: 're\.compile'
file:
    - match: '\.py$'
tests:
    - pass: 'a = literal_eval(user_input)'
    - pass: "import ast, sys"
    - pass: "from ast import parse"
    - fail: 'evaluation()'
    - fail: 're.compile()'

--- #!java
extends: base
diff: add
line:
    - match: ProcessUtils
    - match: '\.(exec|execute)\('
    - match: ProcessBuilder
file:
    - match: '\.(java|scala|groovy)$'
    - except: '/gradle/'
tests:
    - pass: 'Runtime.getRuntime().exec("hostname")'
    - fail: 'import java.util.concurrent.Executors;'
    - fail: 'import ctx.executionContext'
    - fail: 'import scala.concurrent.ExecutionContext'

--- #!js
extends: base
diff: add
line:
    - match: '(^|\s)eval\('
    - match: child_process
    - match: var command\s*=
file:
    - match: '\.(hx|js)$'
tests:
    - pass: 'eval(user_input)'
    - pass: ' eval(user_input)'
    - fail: 'setGlobalEval( getAll( node, "script" ) );'
