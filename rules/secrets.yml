--- #!~base
description: Secrets should not be commited...

--- #!possible_aws_key
diff: add
extends: base
case_sensitive: true
line:
    - match: '(?<![A-Z0-9])A[A-Z0-9]{19}(?![A-Z0-9])'
#    - match: '(?<![A-Za-z0-9/+=@])[A-Za-z0-9/+=]{40}(?![A-Za-z0-9/+=])'
description: "AWS user keys should come from chef and not being hardcoded in the source."
tests:
    - pass: "AWS_ACCESS_KEY = AKIAIOSFODNN7EXAMPLE"
#    - pass: "AWS_SECRET_KEY = wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
    - fail: "AKIAFOOBAR;"
    - fail: "akiaFOOBAR"
    - fail: "git@github.com:prezi/foobar.git@5ab8a5bfb765a94e25391d4d4b8798983d5a24b0#egg=prezi-website-prezicontainer"
    - fail: "Subproject commit 5ab8a5bfb765a94e25391d4d4b8798983d5a24b0"
    - fail: 'github "facebook/FBSimulatorControl" "355aadbcec3a0fd93421d235cc5ec3c733383e7e"'

--- #!password_in_source
diff: add
extends: base
line:
    - match: '(secret|password|S3Connection)+[\w_]*\s*=.+'
    - except: '.+=>?\s*(get_encrypted_data|{{ S3_SECRET_KEY }}|\w+\[|chef_secrets|settings\.|StringOption\(\)|<%=.*?(password|secret|token))'
    - except: 'export [\w_-]+\s*=\s*(`|\$\()<'
    - except: '(token|secret|password|S3Connection)[\w_-]*\s*=\s*(<%|\#\{|\$\().*(\)|\}|%>)[''"]*$'
    - except: ':[^\s]+\s*=>?\s*[^''"]+$'
    - except: '(token|secret|password|S3Connection)+[\w_]*\s*=='
    - except: 'shared_secret\s*=\s*SECRET'
    - except: 'secret_key\s*=\s*TOP_SECRET'
    - except: 'PublicKeyToken='
    - except: '(csrftoken|ArrayToken)'
    - except: 'secret = "local-secret"'
    - except: 'password\s*=\s*"token"'
    - except: '<%.* (get_auth_header|get_oauth_client_tokens|encrypted_dbag_value|get_basic_client_token)'
    - except: 'AUTH_PASSWORD_VALIDATORS'
    - except: 'getattr\s*\(\s*settings'
    - except: '\{\{[\w/\.]+}}$'
    - except: 'not-a-real-secret'
    - except: '//\s*secret\s*=\s*""'
tests:
    - pass: "aws_secret_access_key=\"AWS_SECRET_KEY\""
    - pass: 'PASSWORD = "foo"'
    - pass: "gradlew buildRelease -PsigningStorePassword=foobar -PsigningKeyPasasword=barfoo -PofflineTesting=&quot;true&quot;"
    - pass: 'path: "/v1/rooms/message?token=#{format}&password=foo&token=bar"'
    - fail: "token = get_encrypted_data('service','secrets')['basic_auth_token']"
    - fail: "aws_secret_key = foo_secrets['foo_aws_secret_access_key']"
    - fail: ':aws_secret => aws_secret_key'
    - fail: ':aws_secret_key => aws_secrets["fail_api_secret_key"],'
    - fail: 'auth_token = <%= @hipchat_auth_token %>'
    - fail: 'aws_secret_key = <%= @aws_secret_key %>'
    - fail: 'export AWS_SECRET_ACCESS_KEY=`< /etc/prezi/${PROJECT_NAME}/deployment_keys.json jq .PRODUCTION.aws_secret_access_key -r'
    - fail: 'management_user_password = <%= @management_user_password %>'
    - fail: 'path: "/v1/rooms/message?format=json&auth_token=#{constant.hipchatApiToken}"'
    - fail: 'return token === 19'
    - fail: 'SsoClientSecret=<% @sso_client_secret %>'
    - fail: 'shared_secret = SECRET'
    - fail: 'secret_key = TOP_SECRET'
    - fail: '<value>System.Resources.ResXResourceReader, PublicKeyToken=b77a5c561934e089</value>'
    - fail: 'div id="csrftoken"'
    - fail: 'IArrayToken = DOM.createArrayToken([]);'
    - fail: 'auth_header = <%= get_auth_header("foobar") %>'
    - fail: 'auth_header = <% for @item in get_oauth_client_tokens("foobar") -%>'
    - fail: 'invitation_token = None'
    - fail: ' secret = "local-secret"'
    - fail: 'followParams.meeting_service_token_url = BuildTokenUrl(preziDescriptor.oid.UTF8String, (self.presentLinkToken ?: @"").UTF8String);'
    - fail: 'secret = "<%= encrypted_dbag_value("foo", "bar", "bar") %>"'
    - fail: 'foo = getattr(settings, "foo")'
    - fail: 'fooPassword={{foo/secrets/bar_password}}'
    - fail: 'password   = {{SECRETS.elasticsearch_password}}'
    - fail: 'password = "token"'
    - fail: 'password = "<%= get_basic_client_token("foo", "bar", "bar").split(":")[1] %>"'
    - fail: '// secret = ""'

--- #!chef_node_secret
diff: all
extends: base
line:
    - match: 'node\..*?\s*=.*?(secret|password|cred|token)'
description: "Node properties are uploaded to Chef server in plaintext, so please don't use it for secrets."
file:
    - match: '\.rb$'
tests:
    - pass: "node.foobar=\"AWS_SECRET_KEY\""
    - fail: "node.foobar = 'bar'"

--- #!basic_auth_in_source
extends: base
diff: add
line:
    - match: '((Authorization|auth).*Basic|auth_header\s*=.*?[''"])'
    - except: 'Basic (bG9jYWw6dG9rZW4=|dXNlcm5hbWU6cGFzc3dvcmQ=)'
    - except: '(encrypted_dbag_value|get_auth_header)\('
    - except: 'getattr\s*\(\s*settings'
    - except: 'expect_basic_auth=True'
tests:
    - pass: "auth_header = base64.encodestring('"
    - fail: ":auth_header => auth_header,"
    - fail: "local_auth_header = basic bG9jYWw6dG9rZW4="
    - fail: 'basic_access_tokens = <% for item in encrypted_dbag_value("a", "b", "c") -%>'
    - fail: 'auth_header = <%= get_auth_header("a", "b", "c") %>'
    - fail: 'FOO_AUTH_HEADER = getattr(settings, "foo")'
    - fail: 'dash_named_service_auth_header = Basic dXNlcm5hbWU6cGFzc3dvcmQ='
    - fail: '@authorize_view(scope=[foo], expect_basic_auth=True)'

--- #!slack_token_in_source
extends: base
diff: add
case_sensitive: true
description: "Slack tokens should come from chef and not being hardcoded in the source."
line:
    - match: 'xox(p|b)-\S{9}-\S{9}'
tests:
    - pass: "xoxp-XXXXXXXXX-XXXXXXXXXXXXXXXXXXX"
    - pass: "xoxb-XXXXXXXXX-XXXXXXXXX-XXXXXXXXX-XXXXXX"
    - fail: "XOXP-foobar"
