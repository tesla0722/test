--- #!~base
description: Secrets should not be commited...
extends: whitelisted_files::whitelisted_files,comments::comments

--- #!possible_aws_key
diff: add
extends: base
case_sensitive: true
line:
    - match: '(?<![A-Z0-9])[A-Z0-9]{20}(?![A-Z0-9])'
    - match: '(?<![A-Za-z0-9/+=@])[A-Za-z0-9/+=]{40}(?![A-Za-z0-9/+=])'
    - except: '(commit|github)'
description: "AWS user keys should come from chef and not being hardcoded in the source."
tests:
    - pass: "AWS_ACCESS_KEY = AKIAIOSFODNN7EXAMPLE"
    - pass: "AWS_SECRET_KEY = wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
    - fail: "AKIAFOOBAR;"
    - fail: "akiaFOOBAR"
    - fail: "git@github.com:prezi/foobar.git@5ab8a5bfb765a94e25391d4d4b8798983d5a24b0#egg=prezi-website-prezicontainer"
    - fail: "Subproject commit 5ab8a5bfb765a94e25391d4d4b8798983d5a24b0"
    - fail: 'github "facebook/FBSimulatorControl" "355aadbcec3a0fd93421d235cc5ec3c733383e7e"'

--- #!password_in_source
diff: add
extends: base
line:
    - match: '(token|secret|password|S3Connection)+[\w_]*\s*=.+'
    - except: '.+=>?\s*(get_encrypted_data|{{ S3_SECRET_KEY }}|\w+\[|chef_secrets|settings\.|StringOption\(\)|<%=.*?(password|secret|token))'
    - except: 'export [\w_-]+\s*=\s*(`|\$\()<'
    - except: '(token|secret|password|S3Connection)[\w_-]*\s*=\s*(<%|\#\{|\$\().*(\)|\}|%>)[''"]*$'
    - except: ':[^\s]+\s*=>?\s*[^''"]+$'
    - except: '(token|secret|password|S3Connection)+[\w_]*\s*=='
    - except: 'shared_secret\s*=\s*SECRET'
    - except: 'secret_key\s*=\s*TOP_SECRET'
    - except: 'PublicKeyToken='
tests:
    - pass: "aws_secret_access_key=\"AWS_SECRET_KEY\""
    - pass: 'PASSWORD = "foo"'
    - pass: "gradlew buildRelease -PsigningStorePassword=foobar -PsigningKeyPasasword=barfoo -PofflineTesting=&quot;true&quot;"
    - pass: 'path: "/v1/rooms/message?token=#{format}&password=foo&token=bar"'
    - fail: "token = get_encrypted_data('service','secrets')['basic_auth_token']"
    - fail: "aws_secret_key = foo_secrets['foo_aws_secret_access_key']"
    - fail: ':aws_secret => aws_secret_key'
    - fail: ':aws_secret_key => aws_secrets["fail_api_secret_key"],'
    - fail: 'auth_token = <%= @hipchat_auth_token %>'
    - fail: 'aws_secret_key = <%= @aws_secret_key %>'
    - fail: 'export AWS_SECRET_ACCESS_KEY=`< /etc/prezi/${PROJECT_NAME}/deployment_keys.json jq .PRODUCTION.aws_secret_access_key -r'
    - fail: 'management_user_password = <%= @management_user_password %>'
    - fail: 'path: "/v1/rooms/message?format=json&auth_token=#{constant.hipchatApiToken}"'
    - fail: 'return token === 19'
    - fail: 'SsoClientSecret=<% @sso_client_secret %>'
    - fail: 'shared_secret = SECRET'
    - fail: 'secret_key = TOP_SECRET'
    - fail: '<value>System.Resources.ResXResourceReader, PublicKeyToken=b77a5c561934e089</value>'

--- #!chef_node_secret
diff: all
extends: base
line:
    - match: 'node\..*?\s*=.*?(secret|password|cred|token)'
description: "Node properties are uploaded to Chef server in plaintext, so please don't use it for secrets."
file:
    - match: '\.rb$'
tests:
    - pass: "node.foobar=\"AWS_SECRET_KEY\""
    - fail: "node.foobar = 'bar'"

--- #!basic_auth_in_source
extends: base
diff: add
line:
    - match: '((Authorization|auth).*Basic|auth_header\s*=.*?[''"])'
tests:
    - pass: "auth_header = base64.encodestring('"
    - fail: ":auth_header => auth_header,"
