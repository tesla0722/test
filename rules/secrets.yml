--- #!~base
description: Secrets should not be commited...
extends: whitelisted_files::whitelisted_files,comments::comments

--- #!possible_aws_key
diff: add
extends: base
case_sensitive: true
line:
    - match: AKIA.*
description: "AWS user keys should come from chef and not being hardcoded in the source."
tests:
    - pass: "AWS AKIAFOOBAR;"
    - fail: "akiaFOOBAR"

--- #!password_in_source
diff: add
extends: base
line:
    - match: '(token|secret|password|S3Connection)+[\w_]*[\s]*=.+'
    - except: '.+=>?\s*(get_encrypted_data|{{ S3_SECRET_KEY }}|\w+\[|chef_secrets|settings\.|StringOption\(\)|<%=.*?(password|secret|token))'
    - except: 'export [\w_-]+\s*=\s*(`|\$\()<'
    - except: '(token|secret|password|S3Connection)[\w_-]*\s*=\s*(<%|\#\{|\$\().*(\)|\}|%>)[''"]*$'
    - except: ':[^\s]+\s*=>?\s*[^''"]+$'
tests:
    - pass: "aws_secret_access_key=\"AWS_SECRET_KEY\""
    - pass: 'PASSWORD = "foo"'
    - pass: "gradlew buildRelease -PsigningStorePassword=foobar -PsigningKeyPasasword=barfoo -PofflineTesting=&quot;true&quot;"
    - pass: 'path: "/v1/rooms/message?token=#{format}&password=foo&token=bar"'
    - fail: "token = get_encrypted_data('service','secrets')['basic_auth_token']"
    - fail: ' :aws_secret_key => aws_secrets["fail_api_secret_key"],'
    - fail: ':aws_secret => aws_secret_key'
    - fail: 'auth_token = <%= @hipchat_auth_token %>'
    - fail: 'path: "/v1/rooms/message?format=json&auth_token=#{constant.hipchatApiToken}"'
    - fail: ':shared_secret => django_secret_key,'
    - fail: ':django_secret_key => django_secret_key,'

--- #!chef_node_secret
diff: all
extends: base
line:
    - match: 'node\..*?\s*=.*?(secret|password|cred|token)'
description: "Node properties are uploaded to Chef server in plaintext, so please don't use it for secrets."
file:
    - match: '\.rb$'
tests:
    - pass: "node.foobar=\"AWS_SECRET_KEY\""
    - fail: "node.foobar = 'bar'"

--- #!basic_auth_in_source
extends: base
diff: add
line:
    - match: '((Authorization|auth).*Basic|auth_header\s*=.*?[''"])'
tests:
    - pass: "auth_header = base64.encodestring('"
    - fail: ":auth_header => auth_header,"
