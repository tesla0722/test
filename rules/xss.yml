--- #!~base
description: "Unescaped user input might lead to Cross-site scripting issues, please ensure that input can only come from trusted sources"
extends: whitelisted_files::whitelisted_files,comments::comments

--- #!django
extends: base
diff: add
line:
    - match: '\|\s*safe'
    - match: 'mark_safe\s*\('
    - match: "{% autoescape off %}"
tests:
    - pass: " {% autoescape off %} "
    - pass: " {{ xss | safe }}"
    - pass: " 'context' : mark_safe(json.dumps(context)),"
    - fail: "{{xss|urlencode}}"

--- #!django_inscripttags
extends: base
diff: add
description: Django templates inside script tag should have the "| escapejs" filter applied
line:
    - match: "{{.+}}"
    - except: '.+\|\s*urlencode'
    - except: '{{\s*STATIC_URL\s*}}'
    - except: '{{.+\|\s*(yesno|escapejs).*}}'
    - except: '{% blocktrans %}.*{% endblocktrans %}'
inscripttag: true
tests:
    - pass: "{{xss|safe}}"
    - pass: " {{ xss | safe }}"
    - fail: "{{ xss|urlencode }}"
    - fail: "var CITY_JS = '{{ STATIC_URL }}campaigns/';"
    - fail: "deviceIsMobile: {{ mobile|yesno:'true,false' }}"
    - fail: "foo = JSON.parse('{{ data_for_js | escapejs }}');"
    - fail: '{% blocktrans %} {{ foo }} {% endblocktrans %}'

--- #!django_json_no_content_type
extends: base
diff: add
description: Some old browsers parse anything as html if it looks html (ie html tags in json)
line:
    - match: '(HttpResponse|render_to_response|render)\('
    - except: '(simplejson|json).+application/json'
    - except: 'JsonHttpResponse'
    - except: "render\\(request, '[^']*', context\\)"
    - except: 'HttpResponse\([''"][^''"<>]*[''"]\s*(,[^)]*)?\)'
    - except: 'HttpResponse\(\)'
    - except: 'render\(request, [''"].*\.html[''"], context\)'
previously:
    - except: "from prezi.django_utils.json_response import HttpResponse"
file:
    - match: '\.py$'
tests:
    - pass: "return HttpResponse({'access_token': access_token})"
    - pass: "return render_to_response('js_tests/index.html', {'files_to_list': files_to_list})"
    - pass: "return HttpResponse('<div>Healthcheck failed wtf</div>', status=500)"
    - fail: 'return HttpResponse(simplejson.dumps({"status": "FEATURED CACHE ERROR"}), content_type="application/json")'
    - fail: "return render(request, 'support/landing/support_landing_v1.html', context)"
    - fail: "return JsonHttpResponse({'is_business_user': is_business_user})"
    - fail: 'HttpResponse("OK")'
    - fail: "HttpResponse('OK', content_type = \"application/json\")"
    - fail: "return HttpResponse('Out of service (admin down)', status=503)"
    - fail: "return HttpResponse('Healthcheck failed', status=500)"
    - fail: "return HttpResponse('Out of service (admin down)', status=503)"
    - fail: "return HttpResponse('OK', status=123)"
    - fail: "return HttpResponse('Healthcheck failed', status=500)"
    - fail: "return HttpResponse()"
    - fail: "response = render(request, 'android_open.html', context)"


--- #!haskell
description: "error messages and responses should be sanitized"
extends: base
diff: add
line:
    - match: "haltWithMessage"
    - match: "-> Snap"
file:
    - match: '\.hs$'
tests:
    - pass: "return haltWithMessage()"

--- #!jquery_html
description: "Please HTML escape *everything* passed to the .html() and .append() function! Or just use a safer method instead of them (e.g. text)."
extends: base
diff: add
line:
    - match: '\.html\('
    - match: '\$\(.+?\.append\('
    - except: 'Mustache\.render\(\$\('#'
file:
    - match: '\.(js|html|ts)$'
tests:
    - pass: " var a = el.html()"
    - pass: " $twin.html(value)"
    - pass: ' $("#player-js-iframe").append("<iframe src=f.html?oid="'
    - fail: "list.append({})"
    - fail: "var html = Mustache.render($('#foo').html(), bar);"

--- #!html
description: "Please HTML escape *everything* passed to the .innerHTML attribute!"
extends: base
diff: add
line:
    - match: '\.innerHTML\s*='
file:
    - match: '\.(js|html|ts)$'
tests:
    - pass: "var a.innerHTML = b"

--- #!js_location
extends: base
description: "Location object's members are sensitive to xss, eg. location.hash is almost never url-encoded."
diff: add
line:
    - match: (window|document)\.location\.(href|protocol|host|hostname|port|pathname|search|hash|username|password)
    - except: (window|document)\.location\..*=
file:
    - match: '\.(js|html|ts)$'
tests:
    - pass: "p.innerHTML = window.location.hash"
    - fail: "window.location = foobar"
    - fail: "window.location.replace(foobar"
    - fail: "window.location.hash = foobar"

--- #!http_response
extends: base
diff: add
description: Some old browsers parse anything as html if it looks html (ie html tags in json)
line:
    - match: ' HttpResponse\([^)]+'
    - except: 'HttpResponse\([''"][^''"<>]*[''"]\s*(,[^)]*)?\)'
    - except: content_type\s*=\s*['"]application/json['"]
    - except: 'HttpResponse\(status=\w+\)'
previously:
    - except: "from prezi.django_utils.json_response import HttpResponse"
file:
    - match: '\.py$'
tests:
    - pass: " HttpResponse($_GET['to'])"
    - pass: "return HttpResponse('Healthcheck failed %s' % (var'), status=500)"
    - pass: "return HttpResponse('Healthcheck failed ' + var + 'wtf', status=500)"
    - pass: 'return HttpResponse(variable, status=500)'
    - pass: 'return HttpResponse("abc{}".format(var), status=500)'
    - pass: "return HttpResponse('Healthcheck failed <span></span>', status=500)"
    - pass: "return HttpResponse(_var_)"
    - fail: "HttpResponse('OK')"
    - fail: 'HttpResponse("OK")'
    - fail: "HttpResponse('OK', content_type = \"application/json\")"
    - fail: "return HttpResponse('Out of service (admin down)', status=503)"
    - fail: "return HttpResponse('Healthcheck failed', status=500)"
    - fail: "return HttpResponse('Out of service (admin down)', status=503)"
    - fail: "return HttpResponse('OK', status=123)"
    - fail: "return HttpResponse('Healthcheck failed', status=500)"
    - fail: "return HttpResponse()"
    - fail: "return HttpResponse(status=status_code)"
    - fail: "return HttpResponse(status=403)"

--- #!react_js
extends: base
diff: add
case_sensitive: true
line:
    - match: 'dangerouslySetInnerHTML'
tests:
    - pass: " d.span({dangerouslySetInnerHTML:{__html: item.description}}));"
    - fail: "DangerouslySetInnerHTML"

--- #!json_dumped_to_map
extends: base
diff: add
case_sensitive: false
description: "Dont dump json into <script> tag (it will be a valid javascript, but html parser runs first)"
line:
    - match: '[''"]\w+[''"]\s*:\s*[^,''"]*json\.dumps'
file:
    - match: '\.py$'
tests:
    - pass: 'return HttpResponse(req, "template.html", context={"data": json.dumps(tained_data)})'

--- #!django_mark_safe
extends: base
diff: add
case_sensitive: false
description: "make sure this is not unescaped user input"
line:
    - match: '[^\w]mark_safe\('
file:
    - match: '\.py$'
tests:
    - pass: 'mystr = mark_safe(mystr)'

--- #!dom_event_parameter
extends: base
diff: add
line:
    - match: on(Click|Mouse\w+|Change|Context|DblClick)\s*=\s*('|")

tests:
    - pass: ' <a onmouseover = "foobar"/>'
    - fail: '<window oneShot="NO"'
file:
    - except: .*\.(xml)
