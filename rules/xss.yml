--- #!~base
description: "Unescaped user input might lead to Cross-site scripting issues, please ensure that input can only come from trusted sources"
extends: whitelisted_files::whitelisted_files,comments::comments

--- #!django
extends: base
diff: add
line:
    - match: '\|\s*safe'
    - match: 'mark_safe\s*\('
    - match: "{% autoescape off %}"
tests:
    - pass: " {% autoescape off %} "
    - pass: " {{ xss | safe }}"
    - pass: " 'context' : mark_safe(json.dumps(context)),"
    - fail: "{{xss|urlencode}}"

--- #!django_inscripttags
extends: base
diff: add
line:
    - match: "{{.+}}"
    - except: '.+\|\s*urlencode'
    - except: '{{\s*STATIC_URL\s*}}'
inscripttag: true
tests:
    - pass: "{{xss|safe}}"
    - pass: " {{ xss | safe }}"
    - fail: "{{ xss|urlencode }}"
    - fail: "var CITY_JS = '{{ STATIC_URL }}campaigns/';"

--- #!django_json_no_content_type
extends: base
diff: add
line:
    - match: '(HttpResponse|render_to_response|render)\('
    - except: '(simplejson|json).+application/json'
    - except: 'JsonHttpResponse'
    - except: "render\\(request, '[^']*', context\\)"
file:
    - match: '\.py$'
tests:
    - pass: "return HttpResponse({'access_token': access_token})"
    - pass: "return render_to_response('js_tests/index.html', {'files_to_list': files_to_list})"
    - fail: 'return HttpResponse(simplejson.dumps({"status": "FEATURED CACHE ERROR"}), content_type="application/json")'
    - fail: "return render(request, 'support/landing/support_landing_v1.html', context)"
    - fail: "return JsonHttpResponse({'is_business_user': is_business_user})"

--- #!haskell
description: "error messages and responses should be sanitized"
extends: base
diff: add
line:
    - match: "haltWithMessage"
    - match: "-> Snap"
file:
    - match: '\.hs$'
tests:
    - pass: "return haltWithMessage()"

--- #!jquery_html
description: "Please HTML escape *everything* passed to the .html() and .append() function!"
extends: base
diff: add
line:
    - match: '=.+?\.html\('
    - match: '\$\(.+?\.append\('
file:
    - match: '\.(js|html|ts)$'
tests:
    - pass: " var a = el.html()"
    - pass: ' $("#player-js-iframe").append("<iframe src=f.html?oid="'
    - fail: 'list.append({})'

--- #!html
description: "Please HTML escape *everything* passed to the .innerHTML attribute!"
extends: base
diff: add
line:
    - match: '\.innerHTML\s*='
file:
    - match: '\.(js|html|ts)$'
tests:
    - pass: "var a.innerHTML = b"

--- #!js_location
extends: base
description: "Location object's members are sensitive to xss, eg. location.hash is almost never url-encoded."
diff: add
line:
    - match: (window|document)\.location\.(href|protocol|host|hostname|port|pathname|search|hash|username|password)
    - except: (window|document)\.location\..*=
file:
    - match: '\.(js|html|ts)$'
tests:
    - pass: "p.innerHTML = window.location.hash"
    - fail: "window.location = foobar"
    - fail: "window.location.replace(foobar"
    - fail: "window.location.hash = foobar"

--- #!http_response
extends: base
diff: add
line:
    - match: ' HttpResponse\('
    - except: content_type\s*=\s*['"]application/json['"]
file:
    - match: '\.py$'
tests:
    - pass: " HttpResponse($_GET['to'])"
    - fail: "HttpResponse('OK')"
    - fail: 'HttpResponse("OK")'
    - fail: "HttpResponse('OK', content_type = \"application/json\")"

--- #!react_js
extends: base
diff: add
case_sensitive: true
line:
    - match: 'dangerouslySetInnerHTML'
tests:
    - pass: " d.span({dangerouslySetInnerHTML:{__html: item.description}}));"
    - fail: "DangerouslySetInnerHTML"
